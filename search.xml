<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[工厂设计模式]]></title>
      <url>http://iliubang.github.io/2017/02/07/%E5%B7%A5%E5%8E%82%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
      <content type="html"><![CDATA[<h1 id="工厂模式概述"><a href="#工厂模式概述" class="headerlink" title="工厂模式概述"></a>工厂模式概述</h1><p>工厂(Factory Pattern)模式是Java中最常用的设计模式之一。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。<br>在工厂模式中，我们在创建对象时不会对客户端暴露创建逻辑，并且是通过使用一个共同的接口来指向新创建的对象。</p>
<h1 id="简单工厂模式"><a href="#简单工厂模式" class="headerlink" title="简单工厂模式"></a>简单工厂模式</h1><p><img src="/img/2017020701.jpg" alt="uml图"></p>
<a id="more"></a>
<p>下面来看一个小小的栗子：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Operation <span class="title">createOperation</span><span class="params">(String operate)</span> </span>&#123;</div><div class="line">    Operation op = <span class="keyword">null</span>;</div><div class="line">    <span class="keyword">switch</span>(operate) &#123;</div><div class="line">        <span class="keyword">case</span> <span class="string">"+"</span>:</div><div class="line">            op = <span class="keyword">new</span> OperationAdd();</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> <span class="string">"-"</span>:</div><div class="line">            op = <span class="keyword">new</span> OperationSub();</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> <span class="string">"*"</span>:</div><div class="line">            op = <span class="keyword">new</span> OperationMul();</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> <span class="string">"/"</span>:</div><div class="line">            op = <span class="keyword">new</span> OperationDiv();</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> op;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>优点：客户端不需要修改代码<br>缺点：当需要增加新的运算类的时候，不仅需新加运算类，还要修改工厂类，违反了开闭原则。</p>
<h1 id="抽象工厂模式"><a href="#抽象工厂模式" class="headerlink" title="抽象工厂模式"></a>抽象工厂模式</h1><p>抽象工厂模式提供一个创建一系列相关或相互依赖对象的接口，而无需指定他们具体的类。<br><img src="/img/2017020702.jpg" alt="uml图"></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//Shape.java</span></div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Shape</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//Rectangle.java</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Rectangle</span> <span class="keyword">implements</span> <span class="title">Shape</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"Inside Rectangle::draw() method"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//Square.java</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Square</span> <span class="keyword">implements</span> <span class="title">Shape</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"Inside Square::draw() method"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//Circle.java</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Circle</span> <span class="keyword">implements</span> <span class="title">Shape</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"Inside Circle::draw() method"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//Color.java</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Color</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">fill</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//Red.java</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Red</span> <span class="keyword">implements</span> <span class="title">Color</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fill</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"Inside Red::fill() method"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">//Green.java</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Green</span> <span class="keyword">implements</span> <span class="title">Color</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fill</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"Inside Green::fill() method"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">//Blue.java</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Blue</span> <span class="keyword">implements</span> <span class="title">Color</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fill</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"Inside Blue::fill() method"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//为Color和Shape对象创建抽象类来获取工厂</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> class <span class="title">AbstractFactory</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">abstract</span> Color <span class="title">getColor</span><span class="params">(String color)</span></span>;</div><div class="line">    <span class="function"><span class="keyword">abstract</span> Shape <span class="title">getShape</span><span class="params">(String shape)</span></span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">//创建扩展了AbstractFactory的工厂类，基于给定的信息生成实体类的对象。</span></div><div class="line"><span class="comment">//ShapeFactory</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShapeFactory</span> <span class="keyword">extends</span> <span class="title">AbstractFactory</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Shape <span class="title">getShape</span><span class="params">(String shape)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (shape == <span class="keyword">null</span>)</div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">if</span> (shape.equalsIgnoreCase(<span class="string">"circle"</span>)) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Circle();</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (shape.equalsIgnoreCase(<span class="string">"square"</span>)) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Square();</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (shape.equalsIgnoreCase(<span class="string">"rectangle"</span>)) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Rectangle();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//ColorFactory</span></div><div class="line">publicc <span class="class"><span class="keyword">class</span> <span class="title">ColorFactory</span> <span class="keyword">extends</span> <span class="title">AbastractFactory</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Color <span class="title">getColor</span><span class="params">(String color)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (color == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (color.equalsIgnoreCase(<span class="string">"red"</span>)) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Red();</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (color.equalsIgnoreCase(<span class="string">"green"</span>)) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Green();</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (color.equalsIgnoreCase(<span class="string">"blue"</span>)) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> blue();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[设计模式]]></title>
      <url>http://iliubang.github.io/2017/02/07/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
      <content type="html"><![CDATA[<h1 id="设计模式简介"><a href="#设计模式简介" class="headerlink" title="设计模式简介"></a>设计模式简介</h1><p>设计模式(design patterns)是一套被反复使用、多数人知晓的、经过分类编目的代码设计经验总结。使用设计模式是为了可重用代码、让代码更容易被他人理解，保证代码的可靠性。毫无疑问，设计模式于己于人都是有利的。设计模式使代码编制真正工程化，设计模式是软件工程的基石，如通大厦的一块砖石一样。项目中合理运用设计模式可以完美的解决很多问题，每种设计模式在现在中都有相应的原理与之对应，每一个模式描述了一个在我们周围不断重复发生的问题，以及该问题的核心解决方案，这也是它能被广泛应用的原因。</p>
<a id="more"></a>
<h1 id="设计模式分类"><a href="#设计模式分类" class="headerlink" title="设计模式分类"></a>设计模式分类</h1><p>总体来说设计模式分为三大类：</p>
<p>创建型模式，共五中：</p>
<ul>
<li>工厂方法模式</li>
<li>抽象工厂模式</li>
<li>单例模式</li>
<li>建造者模式</li>
<li>原型模式</li>
</ul>
<p>结构型模式，共七种：</p>
<ul>
<li>适配器模式</li>
<li>装饰器模式</li>
<li>代理模式</li>
<li>外观模式</li>
<li>桥接模式</li>
<li>组合模式</li>
<li>享元模式</li>
</ul>
<p>行为型模式，共十一种类：</p>
<ul>
<li>策略模式</li>
<li>模板方法模式</li>
<li>观察者模式</li>
<li>迭代子模式</li>
<li>责任链模式</li>
<li>命令模式</li>
<li>备忘录模式</li>
<li>状态模式</li>
<li>访问者模式</li>
<li>中介者模式</li>
<li>解释器模式</li>
</ul>
<p>其实还有两类：并发型模式和线程池模式</p>
<h1 id="设计模式的六大原则"><a href="#设计模式的六大原则" class="headerlink" title="设计模式的六大原则"></a>设计模式的六大原则</h1><p><strong>1. 开闭原则(Open Close Principle)</strong><br>开闭原则就是说对扩展开放，对修改关闭。在程序需要进行扩展的时候，不能修改原有代码，实现一个热插拔的效果。所以一句话概括就是：为了使程序的扩展性好，易于维护和升级。想要达到这样的效果，我们需要使用接口和抽象类。</p>
<p><strong>2. 里氏替换原则(Liskov Substitution Principle)</strong><br>里氏替换原则(Liskov Substitution Principle LSP)是面向对象设计的基本原则之一。里氏替换原则中说，任何基类可以出现的地方，子类一定可以出现。LSP是继承复用的基石，只有当衍生类可以替换掉基类，软件单位的功能不受影响时，基类才能真正被复用，而衍生类也能够在基类的基础上增加新的行为。里氏替换原则是对“开闭原则”的补充。实现“开闭原则”的关键步骤是抽象化。而基类与衍生类的继承关系就是抽象化的具体实现，所以里氏替换原则是对实现抽象化的具体步骤的规范。</p>
<p><strong>3. 依赖倒转原则(Dependence Inversion Principle)</strong><br>这个是开闭原则的基础，具体内容：针对接口编程，依赖于抽象而不依赖于具体。</p>
<p><strong>4. 接口隔离原则(Interface Segregation Principle)</strong><br>这个原则的意思是：使用多个隔离的接口，比使用单个接口要好。还是一个降低类之间耦合度的意思。从这里我们看出，其实设计模式就是一个软件的设计思想，从大型软件架构出发，为了升级和维护方便。</p>
<p><strong>5. 迪米特法则(最少了解原则)(Demeter Principle)</strong><br>定义：一个对象应该对其他对象保持最少的了解，从而使得功能模块相对独立。</p>
<p><strong>6. 合成复用原则(Composite Reuse Principle)</strong><br>尽量使用合成/聚合的方式，而不使用继承。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[基于C语言的编程语言开发yacc_lex初步]]></title>
      <url>http://iliubang.github.io/2017/02/06/%E5%9F%BA%E4%BA%8EC%E8%AF%AD%E8%A8%80%E7%9A%84%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E5%BC%80%E5%8F%91yacc-lex%E5%88%9D%E6%AD%A5/</url>
      <content type="html"><![CDATA[<h1 id="Preface"><a href="#Preface" class="headerlink" title="Preface"></a>Preface</h1><p>当今世道，各种高级语言百花齐放。然而会有人发出这样的疑问–计算机真的能够识别这么多语言吗？稍微有点常识的人都知道，这显然是不可能滴！在计算机的世界里，他们能够直接识别的只有机器语言。然而，由于机器语言对人类不够友好，所以人们才发明了汇编，c，Java…许许多多的人类易读的编程语言，所以我个人对编程语言的理解一直是其实他们就是机器语言的语法糖，而编程语言的创造过程，就是定义一种合理的，没有二义性的语法规则，然后就是通过直接或间接的方式实现该语法到机器语言的转换过程。既然是这样的话，那么我们就很容易想到，计算机语言是一个自我完善的过程：首先我们定了一种非常简单的x1(这里只是用来举例说明，有没有x语言有待考证)语言，然后用机器语言实现了这个非常简单的x1语言的编译器，创造了x1语言，实现了非常简单的新特性，然后我们再用x1语言(相对于机器语言较高级)实现了另一些新的特性的x2语言的编译器，创造了x2语言，…<a id="more"></a>，如此下去，人们创造了汇编语言，从而创造了c语言，接着创造了世界上最好的语言PHP(不知道是不是真的，反正大家都习惯这么说)。<br>在各种高级语言越来越强大的今天，我们可能很难再会去接触最原始的东西，高度封装确实提高了生产力，降低了学习成本，但是也使得现代程序员将太多精力花在了各种说明书上，而不清楚其本质。<br>毕业一年多，工作了一年多，对于计算机编程有了自己的看法，不再像在大学的时候认识的那样肤浅，反而觉得大学中学习的知识才是真正的干货，不禁感叹曾经浪费掉了大好光阴。好在陶渊明有词云：“悟已往之不谏，知来者之可追”。<br>闲暇之余，扒开PHP(这里之所以是PHP并不因为他是世界上最好的语言，只是因为我目前从事的是PHP开发的工作而已)源码，了解了其内部构造和实现原理，百看不一练。今天就初步学习yacc/lex了，记录在我的博客中，以便以后翻阅巩固。</p>
<h1 id="过程简述"><a href="#过程简述" class="headerlink" title="过程简述"></a>过程简述</h1><p>一般来说编程语言的解释执行过程如下：</p>
<p><strong>ONE</strong>. 词法分析<br>将源代码拆分成若干Token的过程</p>
<p><strong>TWO</strong>.语法分析<br>将Token构建成Syntax Tree的过程</p>
<p><strong>THREE</strong>.生成执行码<br>生成可执行文件</p>
<h1 id="yacc（Yet-Another-Compiler-Compiler）"><a href="#yacc（Yet-Another-Compiler-Compiler）" class="headerlink" title="yacc（Yet Another Compiler Compiler）"></a>yacc（Yet Another Compiler Compiler）</h1><p>下面是wikipedia中对yacc的描述</p>
<blockquote>
<p>Yacc is a computer program for the Unix operating system. It is a Look Ahead Left-to-Right (LALR) parser generator, generating a parser, the part of a compiler that tries to make syntactic sense of the source code, specifically a LALR parser, based on an analytic grammar written in a notation similar to Backus–Naur Form (BNF). Yacc itself used to be available as the default parser generator on most Unix systems, though it has since been supplanted as the default by more recent, largely compatible, programs.</p>
</blockquote>
<p>其安装非常简单</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install bison</div></pre></td></tr></table></figure>
<h1 id="lex-flex"><a href="#lex-flex" class="headerlink" title="lex/flex"></a>lex/flex</h1><p>lex 是一个生成词法分析器的工具。Lex读进一个代表词法分析器规则的输入字符串流，然后输出以C语言实做的词法分析器源代码。传统上，lex属于商业软件，但是有些根据原本AT&amp;T代码这些版本的Lex可以以公开源代码的形式获得，并被视为某些系统的一部分，例如说OpenSolaris和贝尔实验室九号项目。另一个有名的Lex公开源代码版本是flex，代表”快速的词法分析器”（fast lexical analyzer）</p>
<p>在linux下安装</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install flex</div></pre></td></tr></table></figure>
<h1 id="practice"><a href="#practice" class="headerlink" title="practice"></a>practice</h1><ul>
<li>实现一个简单的计算程序</li>
</ul>
<p>首先定义lex规则，其扩展名为<code>.l</code>，在lex中可以很容易读懂其定义的规则，因为他用到的是正则表达式。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">%&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"y.tab.h"</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">yywrap</span><span class="params">(<span class="keyword">void</span>)</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line">%&#125;</div><div class="line"></div><div class="line">%%</div><div class="line"></div><div class="line"><span class="string">"+"</span>		<span class="keyword">return</span> ADD;</div><div class="line"><span class="string">"-"</span>		<span class="keyword">return</span> SUB;</div><div class="line"><span class="string">"*"</span>		<span class="keyword">return</span> MUL;</div><div class="line"><span class="string">"/"</span>		<span class="keyword">return</span> DIV;</div><div class="line"><span class="string">"\n"</span>		<span class="keyword">return</span> CR;</div><div class="line"></div><div class="line">([<span class="number">1</span><span class="number">-9</span>][<span class="number">0</span><span class="number">-9</span>]*)|<span class="number">0</span>|([<span class="number">0</span><span class="number">-9</span>]+\.[<span class="number">0</span><span class="number">-9</span>]+) &#123;</div><div class="line">	<span class="keyword">double</span> d;</div><div class="line">	<span class="built_in">sscanf</span>(yytext, <span class="string">"%lf"</span>, &amp;d);</div><div class="line">	yylval.double_value = d;</div><div class="line">	<span class="keyword">return</span> DOUBLE_LITERAL;</div><div class="line">&#125;</div><div class="line"></div><div class="line">[ \t] ;</div><div class="line">. &#123;</div><div class="line">	<span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"lexical error.\n"</span>);</div><div class="line">	<span class="built_in">exit</span>(<span class="number">1</span>);</div><div class="line">&#125;</div><div class="line">%%</div></pre></td></tr></table></figure>
<p>可以看到以上的代码主要包含两部分，<code>%{</code> <code>%}</code>包含的部分和<code>%%</code> <code>%%</code>包含的部分。前一部分叫<strong>定义区块</strong>, 后者是<strong>规则区块</strong>，定义区块内的代码将会被原样输出，在定义区块中<code>#include &quot;y.tab.h&quot;</code>将会在yacc编译其规则文件后自动生成，<code>ADD</code> <code>SUB</code> <code>MUL</code> <code>DIV</code> <code>CR</code> <code>DOUBLE_LITERAL</code>等都是在y.tab.h中定义的macro。<br>在定义区块中，有一个名为<code>yywrap</code>的function，其作用是自动link lex的库文件。<br>至于规则区块，学过正则表达式的人一看就会明白，其作用就是使用正则表达式来描述Token。规则区块的定义为：正则表达式，后边跟上C代码，这些代码用<code>{}</code>括起来，读入的字符流满足了正则，则执行其后的代码，匹配到的原字符被保存在<code>yytext</code>这个全局变量中。</p>
<p>接着来编写yacc的规则，其扩展名为<code>.y</code>。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div></pre></td><td class="code"><pre><div class="line">%&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> YYDEBUG 1</span></div><div class="line"></div><div class="line">%&#125;</div><div class="line"></div><div class="line">%<span class="keyword">union</span> &#123;</div><div class="line">	<span class="keyword">int</span>	int_value;</div><div class="line">	<span class="keyword">double</span>	double_value;</div><div class="line">&#125;</div><div class="line"></div><div class="line">%token &lt;double_value&gt;		DOUBLE_LITERAL</div><div class="line">%token ADD SUB MUL DIV CR</div><div class="line">%type &lt;double_value&gt; expression term primary_expression</div><div class="line"></div><div class="line">%%</div><div class="line"></div><div class="line">line_list</div><div class="line">	: line</div><div class="line">	| line_list line</div><div class="line">;</div><div class="line">line</div><div class="line">	: expression CR</div><div class="line">	&#123;</div><div class="line">		<span class="built_in">printf</span>(<span class="string">"&gt;&gt;%lf\n"</span>, $<span class="number">1</span>);</div><div class="line">	&#125;</div><div class="line">;</div><div class="line">expression</div><div class="line">	: term</div><div class="line">	| expression ADD term</div><div class="line">	&#123;</div><div class="line">		$$ = $<span class="number">1</span> + $<span class="number">3</span>;</div><div class="line">	&#125;</div><div class="line">	| expression SUB term</div><div class="line">	&#123;</div><div class="line">		$$ = $<span class="number">1</span> - $<span class="number">3</span>;</div><div class="line">	&#125;</div><div class="line">;</div><div class="line">term</div><div class="line">	: primary_expression</div><div class="line">	| term MUL primary_expression</div><div class="line">	&#123;</div><div class="line">		$$ = $<span class="number">1</span> * $<span class="number">3</span>;</div><div class="line">	&#125;</div><div class="line">	| term DIV primary_expression</div><div class="line">	&#123;</div><div class="line">		$$ = $<span class="number">1</span> / $<span class="number">3</span>;</div><div class="line">	&#125;</div><div class="line">;</div><div class="line">primary_expression</div><div class="line">	: DOUBLE_LITERAL</div><div class="line">;</div><div class="line"></div><div class="line">%%</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">yyerror</span><span class="params">(<span class="keyword">char</span> <span class="keyword">const</span> *str)</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">extern</span> <span class="keyword">char</span> *yytext;</div><div class="line">	<span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"syntax error near %s\n"</span>, yytext);</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></div><div class="line">&#123;</div><div class="line">	<span class="function"><span class="keyword">extern</span> <span class="keyword">int</span> <span class="title">yyparse</span><span class="params">(<span class="keyword">void</span>)</span></span>;</div><div class="line">	<span class="keyword">extern</span> FILE *yyin;</div><div class="line"></div><div class="line">	yyin = <span class="built_in">stdin</span>;</div><div class="line">	<span class="keyword">if</span> (yyparse()) &#123;</div><div class="line">		<span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Core Dump!\n"</span>);</div><div class="line">		<span class="built_in">exit</span>(<span class="number">1</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>yacc规则定义跟lex相似，都用到了<code>\%{\%}</code> <code>%%</code>来包含代码块。<br>同样的是<code>\%{\%}</code>包裹的代码将被原样输出。<br>在<code>%union</code>定义中，声明了记号和非终结符的类型，其最终会被编译成一个c语言的union。这里定义了一个int 类型的<code>int_value</code> 和 double类型的<code>double_value</code>。<br><code>%token</code>开头的行是Token的声明，所有用到的Token类型都在这里定义。对于<code>ADD</code> <code>SUB</code> <code>MUL</code> <code>DIV</code> <code>CR</code>等记号只需要包含其类型即可，而对于值为<code>DOUBLE_LITERAL</code>的Token，其类型被指定为<code>&lt;double_value&gt;</code>，这里的double_value正是来自于前面声明的union中的成员之一。<br><code>%%</code>包裹的部分叫做规则区块，由语法规则和C语言编写的相应的行为两部分构成。在yacc中使用了类似于BNF范式来编写语法规则。由于使用了自然语言作为标记，理解上还是很容易的。下面举个简单的例子：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">line_list                 <span class="comment">/* 多行规则 */</span></div><div class="line">	: line                  <span class="comment">/* 单行 */</span></div><div class="line">	| line_list line        <span class="comment">/* 或者多行后跟单行 */</span></div><div class="line">;</div><div class="line">line                       <span class="comment">/* 单行 */</span></div><div class="line">	: expression CR          <span class="comment">/* 表达式后跟换行符 */</span></div><div class="line">;</div><div class="line">expression                 <span class="comment">/* 表达式 */</span></div><div class="line">	: term                   <span class="comment">/* 和项 */</span></div><div class="line">	| expression ADD term    <span class="comment">/* 或者表达式加上和项 */</span></div><div class="line">	&#123;                        <span class="comment">/* 匹配后执行的action */</span></div><div class="line">		$$ = $<span class="number">1</span> + $<span class="number">3</span>;</div><div class="line">	&#125;</div><div class="line">	| expression SUB term    <span class="comment">/* 或者表达式减去和项 */</span></div><div class="line">	&#123;                        <span class="comment">/* 匹配后执行的action */</span></div><div class="line">		$$ = $<span class="number">1</span> - $<span class="number">3</span>;</div><div class="line">	&#125;</div><div class="line">;</div><div class="line">term                        <span class="comment">/* 和项 */</span></div><div class="line">	: primary_expression      <span class="comment">/* 一元表达式 */</span></div><div class="line">	| term MUL primary_expression <span class="comment">/* 或者和项乘以一元表达式 */</span></div><div class="line">	&#123;                          <span class="comment">/* 匹配后执行的action */</span></div><div class="line">		$$ = $<span class="number">1</span> * $<span class="number">3</span>;</div><div class="line">	&#125;                          </div><div class="line">	| term DIV primary_expression <span class="comment">/* 或者和项除以一元表达式 */</span></div><div class="line">	&#123;                             <span class="comment">/* 匹配后执行的action */</span></div><div class="line">		$$ = $<span class="number">1</span> / $<span class="number">3</span>;</div><div class="line">	&#125;</div><div class="line">;</div><div class="line">primary_expression          <span class="comment">/* 一元表达式 */</span></div><div class="line">	: DOUBLE_LITERAL          <span class="comment">/* 实数字面量 */</span></div><div class="line">;</div></pre></td></tr></table></figure>
<p>写好了规则，那么就来编译运行</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">yacc -dv foo.y</div><div class="line">flex foo.l</div><div class="line">gcc -std=c99 -Wall -g -o foo y.tab.c lex.yy.c</div></pre></td></tr></table></figure>
<p>这样就生成了<code>foo</code>这个可执行文件<br>运行foo</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">liubang@venux:~/workspace/c/my_lang/lex$ make run</div><div class="line">1 + 3</div><div class="line">&gt;&gt;4.000000</div><div class="line">1/2 </div><div class="line">&gt;&gt;0.500000</div><div class="line">4 * 5</div><div class="line">&gt;&gt;20.000000</div></pre></td></tr></table></figure>
<p>当然我个人在开发c程序的时候偏向于使用make工具来编译代码，这样会很方便。下面是我的Makefile文件:</p>
<figure class="highlight makefile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">CFLAGS = -O2 -g -Wall -std=c99</div><div class="line">EXEC = foo</div><div class="line">OBJS =	y.tab.o \</div><div class="line">	lex.yy.o</div><div class="line"></div><div class="line"></div><div class="line">%.c:</div><div class="line">	yacc -dv foo.y</div><div class="line">	lex foo.l</div><div class="line"></div><div class="line">%.o: %.c</div><div class="line">	 <span class="variable">$(CC)</span> <span class="variable">$(CFLAGS)</span> -o $@ -c $&lt;</div><div class="line"></div><div class="line">$(EXEC): $(OBJS)</div><div class="line">	<span class="variable">$(CC)</span> <span class="variable">$(OBJS)</span> -o $@</div><div class="line"></div><div class="line">all: $(EXEC)</div><div class="line"></div><div class="line">run: $(EXEC)</div><div class="line">	@./<span class="variable">$(EXEC)</span></div><div class="line"></div><div class="line"><span class="section">clean:</span></div><div class="line">	<span class="variable">$(RM)</span> <span class="variable">$(OBJS)</span> <span class="variable">$(EXEC)</span></div></pre></td></tr></table></figure>
<p>只需要执行<code>make run</code>命令即可运行！</p>
<h1 id="附加"><a href="#附加" class="headerlink" title="附加"></a>附加</h1><p>可能有人会疑惑，这玩意学着有什么用，那么有兴趣的你可以下载一份PHP的源代码，在Zend(Zend引擎核心文件)目录中你不难找到<code>zend_language_scanner.l</code>,<code>zend_ini_scanner.l</code>,<code>zend_ini_parser.y</code>,<code>zend_language_parser.y</code>这几个文件，打开其内容，是不是不再那么恐惧和陌生了呢。</p>
<h1 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h1><p>本文只是初步介绍yacc/lex工具生成词法解析器和语法解析器的最基本用法，没有太多的阐述词法解析的原理和过程，所以更偏实践，再由于本人毕业一年多实在很久没写文章了，常常会提笔不知从何说起，所以写起来很慢，加之白天要工作，时间较紧，所以今天就到这里了，至于理论的阐述，需要时间来慢慢酝酿😂！</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Demo]]></title>
      <url>http://iliubang.github.io/2017/02/06/Demo/</url>
      <content type="html"><![CDATA[<p>this is my demo document.</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">namespace</span> <span class="title">foo</span></div><div class="line"></div><div class="line"><span class="title">class</span> <span class="title">App</span> &#123;</div><div class="line">    </div><div class="line">    <span class="title">private</span> <span class="title">static</span> $<span class="title">instance</span> = <span class="title">null</span>;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">    &#125;    </div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (!<span class="keyword">self</span>::$instance <span class="keyword">instanceof</span> <span class="keyword">self</span>) &#123;</div><div class="line">            <span class="keyword">self</span>::$instance = <span class="keyword">new</span> <span class="keyword">self</span>();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> <span class="keyword">self</span>::$instance;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="test-math"><a href="#test-math" class="headerlink" title="test math"></a>test math</h2><p>这是测试用的$\lambda$</p>
<p>$$\frac{\partial u}{\partial t}<br>= h^2 \left( \frac{\partial^2 u}{\partial x^2} +<br>\frac{\partial^2 u}{\partial y^2} +<br>\frac{\partial^2 u}{\partial z^2}\right)$$</p>
]]></content>
    </entry>
    
  
  
</search>
